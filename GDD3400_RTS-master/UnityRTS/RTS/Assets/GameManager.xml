<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameManager</name>
    </assembly>
    <members>
        <member name="T:GameManager.AssemblyLoader">
            <summary>
            AssemblyLoader Class
            </summary>
        </member>
        <member name="M:GameManager.AssemblyLoader.#ctor">
            <summary>
            AssemblyLoader
            </summary>
        </member>
        <member name="M:GameManager.AssemblyLoader.Resolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Resolve
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:GameManager.Constants">
            <summary>
            Constants - set of game-defining constants.
            </summary>
        </member>
        <member name="F:GameManager.Constants.HUMAN_ABBR">
            <summary>
            String that represents the name of the Human agent
            </summary>
        </member>
        <member name="F:GameManager.Constants.ORC_ABBR">
            <summary>
            String that represents the name of the Orc agent
            </summary>
        </member>
        <member name="P:GameManager.Constants.Health">
            <summary>
            Health associated with each unit (Mine health is amount of gold)
            </summary>
        </member>
        <member name="P:GameManager.Constants.Damage">
            <summary>
            Damage associated with each unit
            </summary>
        </member>
        <member name="P:GameManager.Constants.MovingSpeed">
            <summary>
            Moving speed associated with each unit
            </summary>
        </member>
        <member name="P:GameManager.Constants.MiningSpeed">
            <summary>
            Mining speed associated with each unit
            </summary>
        </member>
        <member name="P:GameManager.Constants.MiningCapacity">
            <summary>
            Mining time associated with each unit
            </summary>
        </member>
        <member name="P:GameManager.Constants.Cost">
            <summary>
            Cost associated with each unit
            </summary>
        </member>
        <member name="P:GameManager.Constants.CreationTime">
            <summary>
            Creation time associated with each unit
            </summary>
        </member>
        <member name="P:GameManager.Constants.Dependency">
            <summary>
            Dependencies associated with each unit
            </summary>
        </member>
        <member name="P:GameManager.Constants.Builds">
            <summary>
            Builds associated with each unit
            </summary>
        </member>
        <member name="P:GameManager.Constants.Trains">
            <summary>
            Trains associated with each unit
            </summary>
        </member>
        <member name="P:GameManager.Constants.CanMove">
            <summary>
            Can unit move
            </summary>
        </member>
        <member name="P:GameManager.Constants.CanBuild">
            <summary>
            Can unit build
            </summary>
        </member>
        <member name="P:GameManager.Constants.CanTrain">
            <summary>
            Can unit train
            </summary>
        </member>
        <member name="P:GameManager.Constants.CanAttack">
            <summary>
            Can unit attack
            </summary>
        </member>
        <member name="P:GameManager.Constants.CanGather">
            <summary>
            Can unit gather
            </summary>
        </member>
        <member name="P:GameManager.Constants.AttackRange">
            <summary>
            Unit Attack range
            </summary>
        </member>
        <member name="P:GameManager.Constants.UnitSize">
            <summary>
            Unit size
            </summary>
        </member>
        <member name="F:GameManager.Constants.MINING_BOOST">
            <summary>
            Gold mining boost for refineries
            </summary>
        </member>
        <member name="F:GameManager.Constants.DAMAGE">
            <summary>
            Initial damage associated with each unit
            </summary>
        </member>
        <member name="F:GameManager.Constants.HEALTH">
            <summary>
            Initial health associated with each unit
            </summary>
        </member>
        <member name="F:GameManager.Constants.MINING_CAPACITY">
            <summary>
            Time to mine a resource in seconds
            </summary>
        </member>
        <member name="F:GameManager.Constants.COST">
            <summary>
            Cost to build each unit
            </summary>
        </member>
        <member name="F:GameManager.Constants.DEPENDENCY">
            <summary>
            Dependencies of each unit in order to build/train them
            </summary>
        </member>
        <member name="F:GameManager.Constants.BUILDS">
            <summary>
            Set of Units built by each unit
            </summary>
        </member>
        <member name="F:GameManager.Constants.TRAINS">
            <summary>
            Set of Units trained by each unit
            </summary>
        </member>
        <member name="F:GameManager.Constants.CAN_MOVE">
            <summary>
            Which Units can move
            </summary>
        </member>
        <member name="F:GameManager.Constants.CAN_BUILD">
            <summary>
            Which Units can build
            </summary>
        </member>
        <member name="F:GameManager.Constants.CAN_TRAIN">
            <summary>
            Which Units can train
            </summary>
        </member>
        <member name="F:GameManager.Constants.CAN_ATTACK">
            <summary>
            Which Units can attack
            </summary>
        </member>
        <member name="F:GameManager.Constants.CAN_GATHER">
            <summary>
            Which Units can gather
            </summary>
        </member>
        <member name="F:GameManager.Constants.ATTACK_RANGE">
            <summary>
            Speed at which each unit moves
            </summary>
        </member>
        <member name="F:GameManager.Constants.UNIT_SIZE">
            <summary>
            Raw unit sizes (since sprites aren't always square...)
            </summary>
        </member>
        <member name="F:GameManager.Constants.SCALAR_DAMAGE">
            <summary>
            Primary damage value
            </summary>
        </member>
        <member name="F:GameManager.Constants.SCALAR_MOVING_SPEED">
            <summary>
            Primary moving speed that all troops are scaled by
            </summary>
        </member>
        <member name="F:GameManager.Constants.MOVING_SPEED">
            <summary>
            Speed at which each unit moves
            </summary>
        </member>
        <member name="F:GameManager.Constants.SCALAR_MINING_SPEED">
            <summary>
            Mining speed constants (per second)
            </summary>		
        </member>
        <member name="F:GameManager.Constants.MINING_SPEED">
            <summary>
            Speed at which each unit mines resources
            </summary>
        </member>
        <member name="F:GameManager.Constants.SCALAR_MINING_CAPACITY">
            <summary>
            Time constants
            </summary>
        </member>
        <member name="F:GameManager.Constants.SCALAR_COST">
            <summary>
            Cost constants
            </summary>
        </member>
        <member name="F:GameManager.Constants.SCALAR_CREATION_TIME">
            <summary>
            Creation time constants
            </summary>
        </member>
        <member name="F:GameManager.Constants.CREATION_TIME">
            <summary>
            Time to create each unit in seconds
            </summary>
        </member>
        <member name="F:GameManager.Constants.GAME_SPEED">
            <summary>
            GAME_SPEED - increase this value to make the game go faster
            </summary>
        </member>
        <member name="F:GameManager.Constants.MAX_GAME_SPEED">
            <summary>
            Maximum game speed
            </summary>
        </member>
        <member name="F:GameManager.Constants.directions">
            <summary>
            Directions used to control unit animations
            </summary>
        </member>
        <member name="F:GameManager.Constants.UNIT_VALUE">
            <summary>
            Stores the values for units to compute the "winner" if no one destroys the other agent
            </summary>
        </member>
        <member name="M:GameManager.Constants.CalculateGameConstants">
            <summary>
            InitializeRound the game constants
            </summary>
        </member>
        <member name="T:GameManager.EnumTypes.BuildPhase">
            <summary>
            BuildPhase - phases of the building action
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.BuildPhase.TO_POSITION">
            <summary>
            TO_POSITION - moving to the position where 
            the unit will be built
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.BuildPhase.BUILDING">
            <summary>
            BUILDING - building the unit
            </summary>
        </member>
        <member name="T:GameManager.EnumTypes.Direction">
            <summary>
            Represents the 8 directions for animations
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.Direction.S">
            <summary>
            South
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.Direction.SE">
            <summary>
            Southeast
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.Direction.E">
            <summary>
            East
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.Direction.NE">
            <summary>
            Northeast
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.Direction.N">
            <summary>
            North
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.Direction.NW">
            <summary>
            Northwest
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.Direction.W">
            <summary>
            West
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.Direction.SW">
            <summary>
            Southwest
            </summary>
        </member>
        <member name="T:GameManager.EnumTypes.GatherPhase">
            <summary>
            GatherPhase - phases of the gathering action
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.GatherPhase.TO_MINE">
            <summary>
            TO_MINE - moving to the resource
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.GatherPhase.MINING">
            <summary>
            MINING - collecting the resource
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.GatherPhase.TO_BASE">
            <summary>
            TO_BASE - returning to base
            </summary>
        </member>
        <member name="T:GameManager.EnumTypes.UnitAction">
            <summary>
            UnitAction - actions Units can take
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitAction.IDLE">
            <summary>
            IDLE - unit has nothing to do
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitAction.MOVE">
            <summary>
            MOVE - moving to an arbitrary point
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitAction.TRAIN">
            <summary>
            TRAIN - training a new unit
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitAction.BUILD">
            <summary>
            BUILD - building a new unit
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitAction.GATHER">
            <summary>
            GATHER - gathering a resource
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitAction.ATTACK">
            <summary>
            ATTACK - attacking a unit
            </summary>
        </member>
        <member name="T:GameManager.EnumTypes.PeasantAnimation">
            <summary>
            State machine variables for animation controls
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.PeasantAnimation.WALK">
            <summary>
            Walking
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.PeasantAnimation.WOOD">
            <summary>
            Carrying wood
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.PeasantAnimation.GOLD">
            <summary>
            Carrying gold
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.PeasantAnimation.AXE">
            <summary>
            Using axe
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.PeasantAnimation.DEAD">
            <summary>
            Dead
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.PeasantAnimation.IDLE">
            <summary>
            Idle
            </summary>
        </member>
        <member name="T:GameManager.EnumTypes.PeasantSpeed">
            <summary>
            Speed for animation controls
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.PeasantSpeed.IDLE">
            <summary>
            Idle speed (not moving)
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.PeasantSpeed.WALK">
            <summary>
            Walking speed
            </summary>
        </member>
        <member name="T:GameManager.EnumTypes.UnitType">
            <summary>
            Type of agent-controlled unit
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitType.MINE">
            <summary>
            MINE - a mine to collect gold
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitType.WORKER">
            <summary>
            PEON - a unit to gather resources or build things
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitType.SOLDIER">
            <summary>
            SOLDIER - an attack unit
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitType.ARCHER">
            <summary>
            ARCHER - a ranged attack unit
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitType.BASE">
            <summary>
            BASE - a unit to return collected resources or
            train PEONs
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitType.BARRACKS">
            <summary>
            BARRACKS - a unit to train SOLDIERs
            </summary>
        </member>
        <member name="F:GameManager.EnumTypes.UnitType.REFINERY">
            <summary>
            REFINERY - a bonus to resource collection and storage
            </summary>
        </member>
        <member name="T:GameManager.Agent">
            <summary>
            Represents a Player in the game
            </summary>
        </member>
        <member name="P:GameManager.Agent.AgentNbr">
            <summary>
            Unique number that identifies this agent
            </summary>
        </member>
        <member name="P:GameManager.Agent.AgentName">
            <summary>
            Name for this agent (used in debugging)
            </summary>
        </member>
        <member name="P:GameManager.Agent.AgentDLLName">
            <summary>
            DLL name for this agent (used in declaring the winner)
            </summary>
        </member>
        <member name="P:GameManager.Agent.AgentNbrWins">
            <summary>
            Number of wins this agent currently has
            </summary>
        </member>
        <member name="M:GameManager.Agent.Log(System.String)">
            <summary>
            Log the learned data to a csv file
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:GameManager.Agent.InitializeAgent(System.String,System.String,System.Int32,System.String)">
            <summary>
            InitializeAgent the agent's identity, this is called once at the
            beginning of the entire game
            </summary>
            <param name="agentName">agent's human/orc name</param>
            <param name="agentNbr">agent's unique number</param>
            <param name="dllName">agent's dll name</param>
            <param name="dllPath"></param>
        </member>
        <member name="M:GameManager.Agent.InitializeMatch">
            <summary>
            InitializeMatch
            This method must be overriden by
            the PlanningAgent and is called at the beginning of each matching
            of two agents.  Each match is comprised of multiple rounds.  This
            is called only once to initialize the agent regardless of the
            number of rounds.
            </summary>
        </member>
        <member name="M:GameManager.Agent.InitializeRound">
            <summary>
            InitializeRound
            This method must be overridden by the PlanningAgent and is
            called at the beginning of each round in a game.  Multiple
            rounds make a single match between two agents.
            </summary>
        </member>
        <member name="M:GameManager.Agent.Learn">
            <summary>
            Learn
            This method is called at the end of each match BEFORE any
            remaining troops are destroyed, so the PlanningAgent can
            observe the "win" state and learn from it.
            </summary>
        </member>
        <member name="P:GameManager.Agent.Gold">
            <summary>
            The amount of gold the agent currently has
            </summary>
        </member>
        <member name="P:GameManager.Agent.Color">
            <summary>
            Screen color of the agent
            </summary>
        </member>
        <member name="M:GameManager.Agent.Update">
            <summary>
            Updates the agent each frame
            </summary>
        </member>
        <member name="M:GameManager.Agent.Move(GameManager.GameElements.Unit,UnityEngine.Vector3Int)">
            <summary>
            Command to move a unit to an arbitrary point on the grid
            </summary>
            <param name="unit">the unit to move</param>	
            <param name="target">the point to move to</param>
        </member>
        <member name="M:GameManager.Agent.Build(GameManager.GameElements.Unit,UnityEngine.Vector3Int,GameManager.EnumTypes.UnitType)">
            <summary>
            Command to send a unit to build another unit at a particular point
            on the grid
            </summary>
            <param name="unit">the building unit</param>
            <param name="target">the location to build the new unit</param>
            <param name="unitType">the new type of unit to build</param>
        </member>
        <member name="M:GameManager.Agent.Gather(GameManager.GameElements.Unit,GameManager.GameElements.Unit,GameManager.GameElements.Unit)">
            <summary>
            Command to send a unit to gather resources from a particular resource
            </summary>
            <param name="unit">the gathering unit</param>
            <param name="resource">the resource to gather</param>
            <param name="baseUnit">the base to return the resource to</param>
        </member>
        <member name="M:GameManager.Agent.Train(GameManager.GameElements.Unit,GameManager.EnumTypes.UnitType)">
            <summary>
            Command to train a unit
            </summary>
            <param name="unit">unit that will do the training</param>
            <param name="unitType">type of unit to train</param>
        </member>
        <member name="M:GameManager.Agent.Attack(GameManager.GameElements.Unit,GameManager.GameElements.Unit)">
            <summary>
            Command to attack another unit
            </summary>
            <param name="unit">unit that will do the attacking</param>
            <param name="target">unit to attack</param>
        </member>
        <member name="T:GameManager.GameElements.MoveEventArgs">
            <summary>
            Arguments for the Move action
            </summary>
        </member>
        <member name="M:GameManager.GameElements.MoveEventArgs.#ctor(GameManager.GameElements.Unit,GameManager.EnumTypes.UnitType,UnityEngine.Vector3Int)">
            <summary>
            Creates an instance of the event arguments
            </summary>
            <param name="unit">unit that will move</param>
            <param name="unitType">type of unit that will move</param>
            <param name="targetPosition">location to move to</param>
        </member>
        <member name="P:GameManager.GameElements.MoveEventArgs.Target">
            <summary>
            Location to which the unit will move
            </summary>
        </member>
        <member name="P:GameManager.GameElements.MoveEventArgs.Unit">
            <summary>
            Unit that will move
            </summary>
        </member>
        <member name="P:GameManager.GameElements.MoveEventArgs.UnitType">
            <summary>
            Type of unit that will move
            </summary>
        </member>
        <member name="T:GameManager.GameElements.GatherEventArgs">
            <summary>
            Arguments for the Gather action
            </summary>
        </member>
        <member name="M:GameManager.GameElements.GatherEventArgs.#ctor(GameManager.GameElements.Unit,GameManager.GameElements.Unit,GameManager.GameElements.Unit)">
            <summary>
            Creates an instance of the event arguments
            </summary>
            <param name="unit">unit that will gather</param>
            <param name="resourceUnit">resource that the unit will gather from</param>
            <param name="baseUnit">base at which the unit will deposit gathered resources</param>
        </member>
        <member name="P:GameManager.GameElements.GatherEventArgs.ResourceUnit">
            <summary>
            Resource from which the unit will gather
            </summary>
        </member>
        <member name="P:GameManager.GameElements.GatherEventArgs.Unit">
            <summary>
            Unit that will gather
            </summary>
        </member>
        <member name="P:GameManager.GameElements.GatherEventArgs.BaseUnit">
            <summary>
            Base at which the unit will deposit gathered resources
            </summary>
        </member>
        <member name="T:GameManager.GameElements.AttackEventArgs">
            <summary>
            Arguments for the Attack action
            </summary>
        </member>
        <member name="M:GameManager.GameElements.AttackEventArgs.#ctor(GameManager.GameElements.Unit,GameManager.GameElements.Unit)">
            <summary>
            Creates an instance of the event arguments
            </summary>
            <param name="unit">unit that will be attacking</param>
            <param name="targetUnit">unit that will be attacked</param>
        </member>
        <member name="P:GameManager.GameElements.AttackEventArgs.Target">
            <summary>
            Unit that will be attacked
            </summary>
        </member>
        <member name="P:GameManager.GameElements.AttackEventArgs.Unit">
            <summary>
            Unit that will be attacking
            </summary>
        </member>
        <member name="T:GameManager.GameElements.TrainEventArgs">
            <summary>
            Arguments for the Train action
            </summary>
        </member>
        <member name="M:GameManager.GameElements.TrainEventArgs.#ctor(GameManager.GameElements.Unit,GameManager.EnumTypes.UnitType)">
            <summary>
            Creates an instance of the event arguments
            </summary>
            <param name="unit">unit that will be training</param>
            <param name="unitType">type of unit to train</param>
        </member>
        <member name="P:GameManager.GameElements.TrainEventArgs.UnitType">
            <summary>
            Type of unit to train
            </summary>
        </member>
        <member name="P:GameManager.GameElements.TrainEventArgs.Unit">
            <summary>
            Unit that will be doing the training
            </summary>
        </member>
        <member name="T:GameManager.GameElements.BuildEventArgs">
            <summary>
            Arguments for the Build action
            </summary>
        </member>
        <member name="M:GameManager.GameElements.BuildEventArgs.#ctor(GameManager.GameElements.Unit,UnityEngine.Vector3Int,GameManager.EnumTypes.UnitType)">
            <summary>
            Creates an instance of the event arguments
            </summary>
            <param name="unit">unit that will be building</param>
            <param name="targetPositionPosition">position to build the new unit</param>
            <param name="unitType">type of unit to build</param>
        </member>
        <member name="P:GameManager.GameElements.BuildEventArgs.TargetPosition">
            <summary>
            Position to build the new unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.BuildEventArgs.UnitType">
            <summary>
            Type of unit to build
            </summary>
        </member>
        <member name="P:GameManager.GameElements.BuildEventArgs.Unit">
            <summary>
            Unit that will do the building
            </summary>
        </member>
        <member name="T:GameManager.GameElements.CameraController">
            <summary>
            Controls the camera and user interface elements correlated to the camera
            </summary>
        </member>
        <member name="T:GameManager.GameElements.Unit">
            <summary>
            Represents a single unit (troop or building) in the game
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.HasDebugging">
            <summary>
            Does this unit have debugging information visible
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.UnitNbr">
            <summary>
            Unique number for this unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.UnitType">
            <summary>
            Type of this unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.IsBuilt">
            <summary>
            Is building of this unit complete?
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.Color">
            <summary>
            Color of this agent
            </summary>
        </member>
        <member name="M:GameManager.GameElements.Unit.ChangeColor(UnityEngine.Color)">
            <summary>
            Change this unit's color
            internal by interface
            </summary>
            <param name="color">new color</param>
        </member>
        <member name="P:GameManager.GameElements.Unit.WorldPosition">
            <summary>
            World position of this agent
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.GridPosition">
            <summary>
            Position on the grid of this agent
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.Health">
            <summary>
            Current hit points of this unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.Agent">
            <summary>
            Agent that owns this unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.TargetGridPos">
            <summary>
            Grid position that this unit is targetting
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.TargetUnitType">
            <summary>
            Unit type that this unit is targetting
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.Speed">
            <summary>
            Movement speed of the unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.MiningSpeed">
            <summary>
            Mining speed of the unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.MiningCapacity">
            <summary>
            Carrying capacity of a miner
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.Cost">
            <summary>
            Cost to train or build the unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.CreationTime">
            <summary>
            Time to train or build the unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.Dependencies">
            <summary>
            Unit dependencies that must be satisfied before
            building or training this unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.CanMove">
            <summary>
            Can this unit move
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.CanBuild">
            <summary>
            Can this unit build others
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.CanTrain">
            <summary>
            Can this unit train others
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.CanAttack">
            <summary>
            Can this unit attack others
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.CanGather">
            <summary>
            Can this unit gather
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.Trains">
            <summary>
            Which Units does this unit Train
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.Builds">
            <summary>
            Which Units does this unit Train
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.Velocity">
            <summary>
            Velocity of this unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.CurrentAction">
            <summary>
            Current action of this unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.BaseUnit">
            <summary>
            Current main base of this unit
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.MineUnit">
            <summary>
            Current main mine of this unit
            null otherwise
            </summary>
        </member>
        <member name="P:GameManager.GameElements.Unit.AttackUnit">
            <summary>
            Unit that this unit is attacking
            null otherwise
            </summary>
        </member>
        <member name="M:GameManager.GameElements.Unit.CanTrainUnit(GameManager.EnumTypes.UnitType)">
            <summary>
            CanTrainUnit asks if the current unit
            can train the type of unit provided by the parameter
            </summary>
            <param name="UnitType">type of unit to train</param>
            <returns>true if trainable and false otherwise</returns>
        </member>
        <member name="M:GameManager.GameElements.Unit.CanBuildUnit(GameManager.EnumTypes.UnitType)">
            <summary>
            CanBuildUnit asks if the current unit
            can build the type of unit provided by the parameter
            </summary>
            <param name="UnitType">type of unit to train</param>
            <returns>true if buildable, false otherwise</returns>
        </member>
        <member name="M:GameManager.GameElements.Unit.Initialize(UnityEngine.GameObject,UnityEngine.Vector3Int,GameManager.EnumTypes.UnitType,System.Int32)">
            <summary>
            InitializeRound this unit
            </summary>
            <param name="agent">agent that owns this unit</param>
            <param name="gridPosition">initial position of this unit</param>
            <param name="unitType">type of this unit</param>
            <param name="unitNbr">the unique number for this unit</param>
        </member>
        <member name="M:GameManager.GameElements.Unit.StartTraining(GameManager.GameElements.TrainEventArgs)">
            <summary>
            Start training another unit
            </summary>
            <param name="args">arguments for the training task</param>
        </member>
        <member name="M:GameManager.GameElements.Unit.StartBuilding(GameManager.GameElements.BuildEventArgs)">
            <summary>
            Start building another unit
            </summary>
            <param name="args">arguments for the building task</param>
        </member>
        <member name="M:GameManager.GameElements.Unit.StartMoving(GameManager.GameElements.MoveEventArgs)">
            <summary>
            Start moving this agent
            </summary>
            <param name="args">arguments for moving task</param>
        </member>
        <member name="M:GameManager.GameElements.Unit.StartGathering(GameManager.GameElements.GatherEventArgs)">
            <summary>
            Start gathering a resource
            </summary>
            <param name="args">arguments for the gathering task</param>
        </member>
        <member name="M:GameManager.GameElements.Unit.StartAttacking(GameManager.GameElements.AttackEventArgs)">
            <summary>
            Start attacking another agent
            </summary>
            <param name="args">arguments for attacking task</param>
        </member>
        <member name="M:GameManager.GameElements.Unit.Update">
            <summary>
            Update this unit
            </summary>
        </member>
        <member name="M:GameManager.GameElements.Unit.MapVelocityToDirection">
            <summary>
            Map the current velocity to the direction the unit is moving
            South is 0, directions are counter-clockwise
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameManager.GameElements.Unit.UpdatePath(UnityEngine.Vector3Int,GameManager.EnumTypes.UnitType,UnityEngine.Vector3Int)">
            <summary>
            Update the path to the target but wait a few frames between each call
            </summary>
        </member>
        <member name="M:GameManager.GameElements.Unit.UpdateMove">
            <summary>
            Update the move task
            </summary>
        </member>
        <member name="M:GameManager.GameElements.Unit.UpdateAttack">
            <summary>
            Update the attack task
            </summary>
        </member>
        <member name="M:GameManager.GameElements.Unit.UpdateBuild">
            <summary>
            Update the build task
            </summary>
        </member>
        <member name="M:GameManager.GameElements.Unit.UpdateTrain">
            <summary>
            Update the train task
            </summary>
        </member>
        <member name="M:GameManager.GameElements.Unit.UpdateGather">
            <summary>
            Update the gather task
            </summary>
        </member>
        <member name="T:GameManager.GameElements.Utility">
            <summary>
            Class with helper functions to convert between coordinate systems
            </summary>
        </member>
        <member name="M:GameManager.GameElements.Utility.WorldToGrid(UnityEngine.Vector3)">
            <summary>
            Convert a Vector3 to a Vector3Int in the grid
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GameManager.GameElements.Utility.GridToWorld(UnityEngine.Vector3Int)">
            <summary>
            Convert a Vector3Int in the grid to a vector2
            </summary>
            <param name="gridPosition"></param>
            <returns></returns>
        </member>
        <member name="M:GameManager.GameElements.Utility.IntToGrid(System.Int32)">
            <summary>
            Convert a gridcell's number to a Vector3Int in the grid
            </summary>
            <param name="gridNbr"></param>
            <returns></returns>
        </member>
        <member name="M:GameManager.GameElements.Utility.GridToInt(UnityEngine.Vector3Int)">
            <summary>
            Convert a Vector3Int in the grid to the gridcell's number
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GameManager.GameElements.Utility.SafeNormalize(UnityEngine.Vector3)">
            <summary>
            Safely normalize a vector2, preventing divide
            by zero errors or infinitely large vectors
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:GameManager.GameElements.Utility.IsValidGridLocation(UnityEngine.Vector3Int)">
            <summary>
            Is the Vector3Int a valid position in the world
            </summary>
            <param name="gridPosition">position to test</param>
            <returns>true if in the world</returns>
        </member>
        <member name="M:GameManager.GameElements.Utility.ConvertPositionToDirection(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
            <summary>
            Used by the animation system to convert between the actual direction the agent is moving
            and the direction of its animation
            </summary>
            <param name="startPosition">starting grid position</param>
            <param name="endPosition">ending grid position</param>
            <returns></returns>
        </member>
        <member name="T:GameManager.GameManager">
            <summary>
            Manages the game
            </summary>
        </member>
        <member name="F:GameManager.GameManager.HumanDllName">
            <summary>
            Name of the DLL to use for the Humans
            </summary>
        </member>
        <member name="F:GameManager.GameManager.OrcDllName">
            <summary>
            Name of the DLL to use for the Orcs
            </summary>
        </member>
        <member name="F:GameManager.GameManager.RandomizeAgentsAsOrc">
            <summary>
            Should matches be played against random agents?
            </summary>
        </member>
        <member name="F:GameManager.GameManager.StartingPlayerGold">
            <summary>
            Starting gold for each player
            </summary>
        </member>
        <member name="F:GameManager.GameManager.StartingMineGold">
            <summary>
            Amount of starting gold in each mine
            </summary>
        </member>
        <member name="F:GameManager.GameManager.NumberOfMines">
            <summary>
            Number of mines at the start of the game
            </summary>
        </member>
        <member name="F:GameManager.GameManager.StartingGameSpeed">
            <summary>
            Starting Game Speed
            </summary>
        </member>
        <member name="F:GameManager.GameManager.TotalNbrOfRounds">
            <summary>
            Number of competition rounds
            </summary>
        </member>
        <member name="F:GameManager.GameManager.MaxNbrOfSeconds">
            <summary>
            Maximum number of seconds a game may run
            </summary>
        </member>
        <member name="F:GameManager.GameManager.GameManagerLogColor">
            <summary>
            Color for the GM's log statements
            </summary>
        </member>
        <member name="F:GameManager.GameManager.TotalGameTime">
            <summary>
            Time that has passed in the game, corrected for game-speed.
            </summary>
        </member>
        <member name="F:GameManager.GameManager.EnableLearning">
            <summary>
            Enable Learning for the Agents
            </summary>
        </member>
        <member name="F:GameManager.GameManager.Prefabs">
            <summary>
            Loader for all the game prefabs
            </summary>
        </member>
        <member name="F:GameManager.GameManager.HumanDebuggerCanvas">
            <summary>
            Human Debugger Canvas
            </summary>
        </member>
        <member name="F:GameManager.GameManager.OrcDebuggerCanvas">
            <summary>
            Orc Debugger Canvas
            </summary>
        </member>
        <member name="P:GameManager.GameManager.Instance">
            <summary>
            Instance of the game manager
            </summary>
        </member>
        <member name="P:GameManager.GameManager.MapSize">
            <summary>
            Size of the map, +x is "right", +y is "up", z is ignored
            </summary>
        </member>
        <member name="P:GameManager.GameManager.HasUnitDebugging">
            <summary>
            Turns the unit-specific debugging UIs on and off
            </summary>
        </member>
        <member name="P:GameManager.GameManager.HasAgentDebugging">
            <summary>
            Turns the agent debugging UIs on and off
            </summary>
        </member>
        <member name="P:GameManager.GameManager.InfluenceMap">
            <summary>
            The tilemap that renders the Influence Map on top of the game grid
            </summary>
        </member>
        <member name="F:GameManager.GameManager.pathToDLLs">
            <summary>
            Path to the DLLs used for the Humans and the Orcs
            </summary>
        </member>
        <member name="P:GameManager.GameManager.GridCells">
            <summary>
            2D array of gridcells the size of the Map
            </summary>
        </member>
        <member name="P:GameManager.GameManager.Units">
            <summary>
            Collection of Units in the game
            </summary>
        </member>
        <member name="P:GameManager.GameManager.Agents">
            <summary>
            Collection of Agents in the game
            </summary>
        </member>
        <member name="P:GameManager.GameManager.AgentWins">
            <summary>
            Number of wins per agent
            </summary>
        </member>
        <member name="P:GameManager.GameManager.Graph">
            <summary>
            Graph used for pathfinding
            </summary>
        </member>
        <member name="P:GameManager.GameManager.OrcUnitPrefabs">
            <summary>
            Prefabs for orc player
            </summary>
        </member>
        <member name="P:GameManager.GameManager.HumanUnitPrefabs">
            <summary>
            Prefabs for human player
            </summary>
        </member>
        <member name="P:GameManager.GameManager.UnitPrefabs">
            <summary>
            Collection of all prefabs
            </summary>
        </member>
        <member name="P:GameManager.GameManager.NbrOfUnits">
            <summary>
            Number of units created
            </summary>
        </member>
        <member name="P:GameManager.GameManager.NbrOfAgents">
            <summary>
            Number of agents created
            </summary>
        </member>
        <member name="P:GameManager.GameManager.TimeToDisplayBanner">
            <summary>
            Time until we restart the game
            </summary>
        </member>
        <member name="F:GameManager.GameManager.instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="F:GameManager.GameManager.graph">
            <summary>
            Backing field for graph
            </summary>
        </member>
        <member name="F:GameManager.GameManager.mainTilemap">
            <summary>
            Primary tilemap used to define the grid size
            </summary>
        </member>
        <member name="F:GameManager.GameManager.NbrOfRounds">
            <summary>
            Number of rounds run so far
            </summary>
        </member>
        <member name="F:GameManager.GameManager.dllNames">
            <summary>
            List of dllNames to pull from for the competition
            </summary>
        </member>
        <member name="M:GameManager.GameManager.#ctor">
            <summary>
            Constructor for GameManager - Singleton
            </summary>
        </member>
        <member name="M:GameManager.GameManager.Awake">
            <summary>
            Initializes the Game Manager when it is instantiated
            </summary>
        </member>
        <member name="M:GameManager.GameManager.GetDLLNamesFromDir">
            <summary>
            Get all of the names from the various PlanningAgent DLLs in the EnemyAgents folder
            </summary>
        </member>
        <member name="M:GameManager.GameManager.InitializeMatch">
            <summary>
            InitializeRound
            Called once at the beginning of each match (sequence of rounds)
            </summary>
        </member>
        <member name="M:GameManager.GameManager.CreateAgent(System.String,System.String,UnityEngine.GameObject,System.Collections.Generic.Dictionary{GameManager.EnumTypes.UnitType,UnityEngine.GameObject},UnityEngine.Canvas)">
            <summary>
            Instantiate an agent
            </summary>
        </member>
        <member name="M:GameManager.GameManager.LoadDLL(System.String,System.String)">
            <summary>
            Load a dll for a PlanningAgent
            </summary>
            <param name="playerName"></param>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:GameManager.GameManager.InitializeRound">
            <summary>
            InitializeRound
            Called once at the start of each round.  Multiple rounds
            make a match.
            </summary>
        </member>
        <member name="M:GameManager.GameManager.Learn">
            <summary>
            Learn
            Called after each round before any remaining units are destroyed so
            that the agent can observe the win state and learn from it
            </summary>
        </member>
        <member name="M:GameManager.GameManager.GenerateGraph">
            <summary>
            Generate the graph based on the tilemaps
            </summary>
            <returns>returns the generated graph</returns>
        </member>
        <member name="M:GameManager.GameManager.GenerateEdges(GameManager.Graph.Graph{GameManager.GameElements.GridCell}@)">
            <summary>
            Generate all of the edges of the graph
            </summary>
            <param name="graph">the graph to which to add edges</param>
        </member>
        <member name="M:GameManager.GameManager.PlaceUnit(UnityEngine.GameObject,UnityEngine.Vector3Int,GameManager.EnumTypes.UnitType,UnityEngine.Color)">
            <summary>
            Place a specific unit on a specific location
            </summary>
            <param name="agent">the agent that owns this new unit</param>
            <param name="gridPosition">location to place unit</param>
            <param name="unitType">type of unit to place</param>
            <param name="color">color associated with unit (used when more than 2 players)</param>
            <returns>the unit created</returns>
        </member>
        <member name="M:GameManager.GameManager.DestroyUnit(UnityEngine.GameObject)">
            <summary>
            Destroys a specific unit and clears its area
            </summary>
            <param name="unit">unit to destroy</param>
        </member>
        <member name="M:GameManager.GameManager.SetAreaBuildability(GameManager.EnumTypes.UnitType,UnityEngine.Vector3Int,System.Boolean)">
            <summary>
             Set the unit's current cell(s) to buildable or not
            </summary>
            <param name="unitType">unit type that has been built</param>
            <param name="gridPosition">position of this unit (upper left corner)</param>
            <param name="isBuildable">new value of IsBuildable</param>
        </member>
        <member name="M:GameManager.GameManager.Log(System.String,UnityEngine.GameObject)">
            <summary>
            Log message that colorizes all debug statements from this package
            </summary>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:GameManager.GameManager.MoveEventHandler(System.Object,System.EventArgs)">
            <summary>
            Initializes a move of a specific unit
            </summary>
            <param name="sender">agent who is sending this command</param>
            <param name="e">parameters of this command</param>
        </member>
        <member name="M:GameManager.GameManager.BuildEventHandler(System.Object,System.EventArgs)">
            <summary>
            Initializes a build of a specific unit
            </summary>
            <param name="sender">agent who is sending this command</param>
            <param name="e">parameters of this command</param>
        </member>
        <member name="M:GameManager.GameManager.GatherEventHandler(System.Object,System.EventArgs)">
            <summary>
            Initializes a gather of a specific resource
            </summary>
            <param name="sender">agent who is sending this command</param>
            <param name="e">parameters of this command</param>
        </member>
        <member name="M:GameManager.GameManager.TrainEventHandler(System.Object,System.EventArgs)">
            <summary>
            Initializes a training of a specific unit
            </summary>
            <param name="sender">agent who is sending this command</param>
            <param name="e">parameters of this command</param>
        </member>
        <member name="M:GameManager.GameManager.AttackEventHandler(System.Object,System.EventArgs)">
            <summary>
            Initializes an attack of a specific unit
            </summary>
            <param name="sender">agent who is sending this command</param>
            <param name="e">parameters of this command</param>
        </member>
        <member name="M:GameManager.GameManager.GetAgent(System.Int32)">
            <summary>
            Get the agent by their agent number
            </summary>
            <param name="agentNbr"></param>
            <returns></returns>
        </member>
        <member name="M:GameManager.GameManager.GetEnemyAgentNbrs(System.Int32)">
            <summary>
            Gets my enemy agent numbers
            </summary>
            <returns>list of unit numbers</returns>
        </member>
        <member name="M:GameManager.GameManager.GetUnitNbrsOfType(GameManager.EnumTypes.UnitType)">
            <summary>
            Gets a list of units of the given type
            </summary>
            <param name="unitType"></param>
            <returns>list of unit numbers</returns>
        </member>
        <member name="M:GameManager.GameManager.GetUnitNbrsOfType(GameManager.EnumTypes.UnitType,System.Int32)">
            <summary>
            Gets a list of units of the given type for the given agent
            </summary>
            <param name="unitType">type of unit to get</param>
            <param name="agentNbr">number of the agent</param>
            <returns>list of unit numbers</returns>
        </member>
        <member name="M:GameManager.GameManager.GetUnit(System.Int32)">
            <summary>
            Get a specific unit based on its unit number
            </summary>
            <param name="unitNbr">unique unit number to find</param>
            <returns>unit or null if the unit no longer exists</returns>
        </member>
        <member name="M:GameManager.GameManager.IsGridPositionBuildable(UnityEngine.Vector3Int)">
            <summary>
            Determines if a specific tile is buildable
            </summary>
            <param name="position">position of the tile in the tilemap</param>
            <returns>true if buildable, false otherwise</returns>
        </member>
        <member name="M:GameManager.GameManager.IsAreaBuildable(GameManager.EnumTypes.UnitType,UnityEngine.Vector3Int)">
            <summary>
            Determines if the unit can be built in that area (base on size of unit)
            </summary>
            <param name="unitType">unit type to build, determines size of area to test</param>
            <param name="gridPosition">upper-left tile of this unit</param>
            <returns>true if area is buildable, false otherwise</returns>
        </member>
        <member name="M:GameManager.GameManager.IsBoundedAreaBuildable(GameManager.EnumTypes.UnitType,UnityEngine.Vector3Int)">
            <summary>
            Determines if the unit can be built in that area with a walkable "boundary" around it.
            This should be used to place units (like a barracks) that need space around them for new
            units to be created or for units to stand.
            </summary>
            <param name="unitType">unit type to build</param>
            <param name="gridPosition">upper-left tile of this unit</param>
            <returns>true if area is buildable, false otherwise</returns>
        </member>
        <member name="M:GameManager.GameManager.IsNeighborOfUnit(UnityEngine.Vector3Int,GameManager.EnumTypes.UnitType,UnityEngine.Vector3Int)">
            <summary>
            Determines if the gridPosition is a neighbor of the unit
            </summary>
            <param name="gridPosition">gridPosition to test</param>
            <param name="unitType">type of unit</param>
            <param name="unitGridPosition">unit's grid position</param>
            <returns>true if gridPosition is a neighbor of unit, false otherwise</returns>
        </member>
        <member name="M:GameManager.GameManager.GetGridPositionsNearUnit(GameManager.EnumTypes.UnitType,UnityEngine.Vector3Int)">
            <summary>
            Get all of the grid positions surrounding a particular unit
            </summary>
            <param name="unitType">type of unit</param>
            <param name="gridPosition">upper-left-hand cell at which to build unit</param>
            <returns>list of positions near a unit</returns>
        </member>
        <member name="M:GameManager.GameManager.GetBuildableGridPositionsNearUnit(GameManager.EnumTypes.UnitType,UnityEngine.Vector3Int)">
            <summary>
            Find all of the buildable grid positions near this unit
            </summary>
            <param name="unitType">type of unit to build</param>
            <param name="gridPosition">upper-left-hand cell at which to build unit</param>
            <returns>list of positions that are buildable near unit</returns>
        </member>
        <member name="M:GameManager.GameManager.GetRandomBuildableLocation(GameManager.EnumTypes.UnitType)">
            <summary>
            Find a random location that is buildable for the unit type provided
            </summary>
            <returns>a buildable position somewhere in the map</returns>
        </member>
        <member name="M:GameManager.GameManager.GetPathToUnit(UnityEngine.Vector3Int,GameManager.EnumTypes.UnitType,UnityEngine.Vector3Int)">
            <summary>
            Get the path from a gridPosition to a position near the unit on any side of it
            </summary>
            <param name="gridPosition">starting grid position for the unit that will be moving</param>
            <param name="unitType">type of the target unit</param>
            <param name="unitGridPosition">gridPosition of the target unit</param>
            <returns>list of gridPositions the unit will need to traverse in the valid path</returns>
        </member>
        <member name="M:GameManager.GameManager.GetPathBetweenGridPositions(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
            <summary>
            Gets the path between two grid positions
            </summary>
            <param name="startGridPosition">starting position</param>
            <param name="endGridPosition">ending position</param>
            <returns>list of positions from start to end, empty if no path was found</returns>
        </member>
        <member name="M:GameManager.GameManager.DetermineRoundWinner">
            <summary>
            Determines if there is a game winner or not
            </summary>
            <returns>winning agent, null otherwise</returns>
        </member>
        <member name="M:GameManager.GameManager.Update">
            <summary>
            Allows the game to run logic such as updating the world,
            checking for collisions, gathering input, and playing audio.
            </summary>
        </member>
        <member name="T:GameManager.InfluenceTile">
            <summary>
            InfluenceTile
            </summary>
        </member>
        <member name="M:GameManager.AgentController.InitializeAgent(UnityEngine.GameObject,System.String,System.String,System.Int32,UnityEngine.Canvas,System.String)">
            <summary>
            Link the Agent to the UI controller by giving it the Agent
            </summary>
            <param name="agent"></param>
            <param name="agentName"></param>
            <param name="agentNbr"></param>
            <param name="agentDLLName"></param>
            <param name="debuggerCanvas"></param>
            <param name="dllPath"></param>
        </member>
        <member name="M:GameManager.AgentController.InitializeMatch">
            <summary>
            InitializeMatch
            Called once at the beginning of each match.
            Multiple rounds make up a match between a single pair
            of agents.  Sets up any variables for the entire match.
            </summary>
        </member>
        <member name="M:GameManager.AgentController.InitializeRound">
            <summary>
            InitializeRound
            Called once at the beginning of each round
            </summary>
        </member>
        <member name="M:GameManager.AgentController.Learn">
            <summary>
            Learn
            Called once after each round before remaining units are destroyed
            </summary>
        </member>
        <member name="M:GameManager.AgentController.Update">
            <summary>
            Updated
            Called once per frame
            </summary>
        </member>
    </members>
</doc>
